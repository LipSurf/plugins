import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.22c2e13e.js";
const __pageData = '{"title":"LipSurf.js","description":"","frontmatter":{},"headers":[{"level":2,"title":"Including LipSurf.js","slug":"including-lipsurf-js"},{"level":2,"title":"Quick Start","slug":"quick-start"},{"level":2,"title":"Initializing LipSurf.js","slug":"initializing-lipsurf-js"},{"level":2,"title":"Methods","slug":"methods"},{"level":3,"title":"handleTranscript","slug":"handletranscript"},{"level":3,"title":"start","slug":"start"},{"level":3,"title":"pause","slug":"pause"},{"level":3,"title":"shutdown","slug":"shutdown"}],"relativePath":"api-reference/script.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="lipsurf-js" tabindex="-1">LipSurf.js <a class="header-anchor" href="#lipsurf-js" aria-hidden="true">#</a></h1><p>LipSurf.js is a standalone script version of LipSurf that works entirely in-page without a supporting Chrome Extension. Plugins may be bundled with the LipSurf.js script.</p><h2 id="including-lipsurf-js" tabindex="-1">Including LipSurf.js <a class="header-anchor" href="#including-lipsurf-js" aria-hidden="true">#</a></h2><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/lipsurf.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">var</span> lipsurf <span class="token operator">=</span> <span class="token function">LipSurf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nlipsurf<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlipsurf<span class="token punctuation">.</span><span class="token function">handleTranscript</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="initializing-lipsurf-js" tabindex="-1">Initializing LipSurf.js <a class="header-anchor" href="#initializing-lipsurf-js" aria-hidden="true">#</a></h2><div class="language-typescript"><pre><code><span class="token keyword">var</span> lipsurf <span class="token operator">=</span> <span class="token function">LipSurf</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// default `true`</span>\n  liveTs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="handletranscript" tabindex="-1"><code>handleTranscript</code> <a class="header-anchor" href="#handletranscript" aria-hidden="true">#</a></h3><p>Sends STT generated transcript to LipSurf for processing and command execution.</p><div class="language-typescript"><pre><code><span class="token comment">/**\n  * \n  * @param transcript\n  * @param confidence between 0 and 1, 1 being the highest level of confidence\n  * @param isFinal set to true if there will not be any subsequent adjustments \n  *     to this transcript\n  * @param segmentId so we can identify if we&#39;re updating a previous \n  *     transcript (eg. with a higher confidence), or if we&#39;re adding newly said \n  *     things\n  * @param recgTime when the transcript was generated in milliseconds since \n  *     UNIX epoch\n  */</span>\n<span class="token function">handleTranscript</span><span class="token punctuation">(</span>\n		transcript<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n		confidence<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n		isFinal<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> \n		segmentId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n		recgTime<span class="token operator">:</span> <span class="token builtin">number</span>\n	<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="start" tabindex="-1"><code>start</code> <a class="header-anchor" href="#start" aria-hidden="true">#</a></h3><p>Start listening.</p><h3 id="pause" tabindex="-1"><code>pause</code> <a class="header-anchor" href="#pause" aria-hidden="true">#</a></h3><p>Pauses LipSurf from listening, but does not turn it completely off (useful for keeping LipSurf generated UI on the screen).</p><h3 id="shutdown" tabindex="-1"><code>shutdown</code> <a class="header-anchor" href="#shutdown" aria-hidden="true">#</a></h3><p>Stops listening and all LipSurf generated UI removed.</p>', 18);
const _hoisted_19 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_19);
}
var script = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, script as default };
