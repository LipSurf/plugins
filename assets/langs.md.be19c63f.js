import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.22c2e13e.js";
var _imports_0 = "/assets/plugin-supported-langs.d58a75e9.png";
var _imports_1 = "/assets/lang-option.a0a2595c.png";
const __pageData = '{"title":"Internationalization","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example"}],"relativePath":"langs.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="internationalization" tabindex="-1">Internationalization <a class="header-anchor" href="#internationalization" aria-hidden="true">#</a></h1><p><em>LipSurf was designed from the ground-up with multi-language support in mind.</em></p><p>LipSurf uses the built-in HTML5 speech-recognizer, hence it supports all of the languages that the Google speech recognizer does, in theory.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a list of supported languages see here: <a href="https://cloud.google.com/speech-to-text/docs/languages" target="_blank" rel="noopener noreferrer">https://cloud.google.com/speech-to-text/docs/languages</a></p></div><p>The base language is English, but any plugin can have its metadata and match phrases/functions adjusted to be compatible with other languages.</p><p>The languages that a given plugin supports are shown in the options.</p><p><img src="' + _imports_0 + '" alt=""></p><p>Once a user has at least one plugin installed that supports a given language, they can switch to that language in the general options.</p><p><img src="' + _imports_1 + '" alt=""></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><p>Let&#39;s localize the <a href="/quick-start.html#hello-world-plugin">hello world plugin</a> from the quick start guide earlier.</p><ol><li><p>Create a new file <code>HelloWorld.ja.ts</code> in the <code>HelloWorld</code> folder where in this case <code>ja</code> is the <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" target="_blank" rel="noopener noreferrer">ISO 639-1</a> language code for Japanese, what we&#39;re localizing for in this example.</p></li><li><p>Import the English (base) plugin so we can reference it and extend it&#39;s language property.</p></li></ol><div class="language-ts"><pre><code><span class="token comment">/// lipsurf-plugins/src/HelloWorld/HelloWorld.ja.ts</span>\n<span class="token comment">/// &lt;reference types=&quot;@lipsurf/types/extension&quot;/&gt;</span>\n<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&#39;./HelloWorld&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="3"><li>Set <code>Plugin.languages!.ja</code> to the localizeable things.</li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>Plugin.languages</code> needs a non-null assertion operator.</p></div><p>You can localize all the things that make sense to: nice names (the pretty ones\u{1F33C}), descriptions, match patterns etc.</p><p>The <code>commands</code> property should be an object with keys of command names that map to the English command names they localize and of type <a href="/api-reference/command.html#ilocalizedcommand"><code>ILocalizedCommand</code></a>).</p><div class="language-ts"><pre><code><span class="token comment">// lipsurf-plugins/src/HelloWorld/HelloWorld.ja.ts</span>\n<span class="token comment">/// &lt;reference types=&quot;@lipsurf/types/extension&quot;/&gt;</span>\n<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;./HelloWorld&quot;</span><span class="token punctuation">;</span>\n\nHelloWorld<span class="token punctuation">.</span>languages<span class="token operator">!</span><span class="token punctuation">.</span>ja <span class="token operator">=</span> <span class="token punctuation">{</span>\n  niceName<span class="token operator">:</span> <span class="token string">&quot;\u4E16\u754C\u306E\u3054\u6848\u5185&quot;</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&quot;\u975E\u5E38\u306B\u5358\u7D14\u306E\u30D7\u30E9\u30B0\u30A4\u30F3&quot;</span><span class="token punctuation">,</span>\n  commands<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;Hello World&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;\u30CF\u30ED\u30FC\u30FB\u30EF\u30FC\u30EB\u30C9&quot;</span><span class="token punctuation">,</span>\n      match<span class="token operator">:</span> <span class="token string">&quot;\u306F\u308D\u30FC\u308F\u30FC\u308B\u3069&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>', 18);
const _hoisted_19 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_19);
}
var langs = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, langs as default };
