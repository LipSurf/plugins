import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.22c2e13e.js";
const __pageData = '{"title":"Contexts","description":"","frontmatter":{},"headers":[{"level":2,"title":"Context Order","slug":"context-order"},{"level":2,"title":"Designating a Context","slug":"designating-a-context"},{"level":2,"title":"Commands Outside of Normal Mode","slug":"commands-outside-of-normal-mode"}],"relativePath":"contexts.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="contexts" tabindex="-1">Contexts <a class="header-anchor" href="#contexts" aria-hidden="true">#</a></h1><p>Contexts are groups of commands that can be combined to determine which commands are relevant or valid for the page&#39;s current state. By default, if a command does not have a context, it is in the <code>PluginBase.constants.contexts.Normal</code> context where most default commands live. LipSurf is always in <b>one or more</b> contexts.</p><p>Example use cases:</p><ul><li><p>Allowing certain commands only in certain situations.</p><ul><li>e.g. When we&#39;re watching a Netflix show, we want <span class="voice-cmd">play</span>, <span class="voice-cmd">pause</span> etc. available. When we&#39;re browsing the Netflix catalogue, we don&#39;t want player commands, but we do want things like <span class="voice-cmd">next page</span>. To handle this, we could watch for URL changes, and if we&#39;re on a page to watch a show, we could use <a href="/api-reference/pluginbase-util.html#prependContext"><code>prependContext(&#39;Player Controls&#39;)</code></a> to add the context that the player controls are under.</li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Because we used <a href="/api-reference/pluginbase-util.html#prependContext"><code>prependContext</code></a> the default commands will still work, because the Normal context remains in the context list.</p></div></li><li><p>Limiting which commands are valid.</p><ul><li>e.g. In the &quot;Dictation&quot; context, we don&#39;t want <span class="voice-cmd">youtube</span> to take us to <a href="http://youtube.com" target="_blank" rel="noopener noreferrer">youtube.com</a>, we want it to literally write &quot;youtube&quot; where we&#39;re composing our text. In this case we don&#39;t want the &quot;Normal&quot; context, so we would <a href="/api-reference/pluginbase-util.html#enterContext"><code>enterContext([&quot;Dictation&quot;])</code></a> to replace the current context with only &quot;Dictation&quot;.</li></ul></li></ul><p>Contexts are per-tab. So the user may be in a dictation mode in one tab, and normal mode in another.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>Make sure to remove a context if it&#39;s specific to the plugin in the plugin&#39;s <a href="/api-reference/plugin.html#destroy">destroy</a> function.</li></ul></div><h2 id="context-order" tabindex="-1">Context Order <a class="header-anchor" href="#context-order" aria-hidden="true">#</a></h2><p>Context order matters. If there are two <span class="voice-cmd">search *</span> commands, the one from the context earlier in the context list gets chosen.</p><h2 id="designating-a-context" tabindex="-1">Designating a Context <a class="header-anchor" href="#designating-a-context" aria-hidden="true">#</a></h2><p>A context is &quot;created&quot; by designating:</p><ul><li>A command&#39;s <a href="/api-reference/command.html#entercontext"><code>enterContext</code> property</a></li><li>A plugin&#39;s <a href="./api-reference/plugin.html#contexts"><code>contexts</code> property</a></li></ul><hr><p>Context can be manipulated programmatically using:</p><ul><li><a href="./api-reference/pluginbase-util.html#entercontext"><code>PluginBase.util.enterContext</code></a></li><li><a href="./api-reference/pluginbase-util.html#prependContext"><code>PluginBase.util.prependContext</code></a></li><li><a href="./api-reference/pluginbase-util.html#appendContext"><code>PluginBase.util.appendContext</code></a></li><li><a href="./api-reference/pluginbase-util.html#removecontext"><code>PluginBase.util.removeContext</code></a></li><li><a href="./api-reference/pluginbase-util.html#getcontext"><code>PluginBase.util.getContext</code></a></li></ul><h2 id="commands-outside-of-normal-mode" tabindex="-1">Commands Outside of Normal Mode <a class="header-anchor" href="#commands-outside-of-normal-mode" aria-hidden="true">#</a></h2><p>By default, a command is in the <code>PluginBase.constants.contexts.Normal</code> (default) context unless <a href="./api-reference/command.html#normal"><code>normal: false</code></a> is specified or a <a href="./api-reference/command.html#context"><code>context</code></a> is specified that doesn&#39;t include <code>PluginBase.constants.contexts.Normal</code>.</p>', 16);
const _hoisted_17 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_17);
}
var contexts = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, contexts as default };
