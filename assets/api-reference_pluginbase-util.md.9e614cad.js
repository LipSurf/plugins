import{_ as e,c as t,o as l,a as i}from"./app.1ef87986.js";const m='{"title":"PluginBase.util","description":"","frontmatter":{},"headers":[{"level":3,"title":"shutdown","slug":"shutdown"},{"level":3,"title":"pause","slug":"pause"},{"level":3,"title":"start","slug":"start"},{"level":3,"title":"getLanguage","slug":"getlanguage"},{"level":3,"title":"setLanguage","slug":"setlanguage"},{"level":3,"title":"enterContext","slug":"entercontext"},{"level":3,"title":"prependContext","slug":"prependcontext"},{"level":3,"title":"appendContext","slug":"appendcontext"},{"level":3,"title":"removeContext","slug":"removecontext"},{"level":3,"title":"getContext","slug":"getcontext"},{"level":3,"title":"queryAllFrames","slug":"queryallframes"},{"level":3,"title":"postToAllFrames","slug":"posttoallframes"},{"level":3,"title":"pick","slug":"pick"},{"level":3,"title":"deepSetArray","slug":"deepsetarray"},{"level":3,"title":"memoize","slug":"memoize"},{"level":3,"title":"fuzzyHighScore","slug":"fuzzyhighscore"},{"level":3,"title":"topFuzzyItemMatches<T>","slug":"topfuzzyitemmatches-t"},{"level":3,"title":"highlight","slug":"highlight"},{"level":3,"title":"unhighlightAll","slug":"unhighlightall"},{"level":3,"title":"disambiguate","slug":"disambiguate"},{"level":3,"title":"clickOrFocus","slug":"clickorfocus"},{"level":3,"title":"isInViewAndTakesSpace","slug":"isinviewandtakesspace"},{"level":3,"title":"getRGB","slug":"getrgb"},{"level":3,"title":"getNoCollisionUniqueAttr","slug":"getnocollisionuniqueattr"},{"level":3,"title":"getOptions","slug":"getoptions"},{"level":3,"title":"getHUDEl","slug":"gethudel"},{"level":3,"title":"scrollToAnimated","slug":"scrolltoanimated"}],"relativePath":"api-reference/pluginbase-util.md"}',o={},a=i('<h1 id="pluginbase-util" tabindex="-1">PluginBase.util <a class="header-anchor" href="#pluginbase-util" aria-hidden="true">#</a></h1><p>The following API exists on <code>PluginBase.util</code> for interacting with the extension and convenience. It can be used within plugins - some utilities are only available in the context of the page (will only work in <a href="#init"><code>init</code></a>, <a href="#destroy"><code>destroy</code></a>, <a href="/api-reference/command.html#pagefn"><code>commands::pageFn</code></a>) others only in the context of the extension (<a href="/api-reference/command.html#fn"><code>fn</code></a>).</p><hr><h3 id="shutdown" tabindex="-1">shutdown <a class="header-anchor" href="#shutdown" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><h3 id="pause" tabindex="-1">pause <a class="header-anchor" href="#pause" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><p>Pauses the speech recognizer, but leaves plugins and HUD un-destroyed. Shows a pause icon in the corner of the extension.</p><h3 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="getlanguage" tabindex="-1">getLanguage <a class="header-anchor" href="#getlanguage" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>LanguageCode</code></li></ul><h3 id="setlanguage" tabindex="-1">setLanguage <a class="header-anchor" href="#setlanguage" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>lang: LanguageCode</code></li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="entercontext" tabindex="-1">enterContext <a class="header-anchor" href="#entercontext" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>contexts: string[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Modifies the context to be exactly what is specified in the argument. The order here matters (commands with a context earlier in the list get priority).</p><p>Also see: <a href="/contexts.html">Contexts</a>.</p><h3 id="prependcontext" tabindex="-1">prependContext <a class="header-anchor" href="#prependcontext" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>contexts: string | string[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Add context(s) to the beginning of the list of existing active contexts for this page (giving its commands more priority than contexts that follow) .</p><p>See <a href="/contexts.html#appendContext"><code>appendContext</code></a> to give less priority to the commands. Also see: <a href="/contexts.html">Contexts</a>.</p><h3 id="appendcontext" tabindex="-1">appendContext <a class="header-anchor" href="#appendcontext" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>contexts: string | string[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Add context(s) to the end of the list of existing active contexts for this page (giving its commands less priority than preceding contexts) .</p><p>See <a href="/contexts.html#prependContext"><code>prependContext</code></a> to give more priority to the commands. Also see: <a href="/contexts.html">Contexts</a>.</p><h3 id="removecontext" tabindex="-1">removeContext <a class="header-anchor" href="#removecontext" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>contexts: string | string[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Removes a context from the active contexts for this page.</p><p>Also see: <a href="/contexts.html">Contexts</a>.</p><h3 id="getcontext" tabindex="-1">getContext <a class="header-anchor" href="#getcontext" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>string[]</code></li></ul><p>Gets the contexts that we&#39;re in on the current page.</p><p>Also see: <a href="/contexts.html">Contexts</a>.</p><hr><h3 id="queryallframes" tabindex="-1">queryAllFrames <a class="header-anchor" href="#queryallframes" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>query: string</code></li><li><code>attrs?: string | string[]</code></li><li><code>props?: string | string[]</code></li><li><code>specialProps?: SpecialProp[]</code></li></ul></li><li>Returns: <code>Promise&lt;string, ...any[]&gt;</code></li></ul><p>Query all frames includes IFrames.</p><h3 id="posttoallframes" tabindex="-1">postToAllFrames <a class="header-anchor" href="#posttoallframes" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>ids?: string | string[]</code></li><li><code>fnNames?: string | string[]</code></li><li><code>selector?</code></li><li><code>specialFns?: SpecialFn | SpecialFn[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="pick" tabindex="-1">pick <a class="header-anchor" href="#pick" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>obj: object</code></li><li><code>...props: string[]</code></li></ul></li><li>Returns: <code>object</code></li></ul><h3 id="deepsetarray" tabindex="-1">deepSetArray <a class="header-anchor" href="#deepsetarray" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>obj: object</code></li><li><code>keys: string[]</code></li><li><code>value: any</code></li></ul></li><li>Returns: <code>object</code></li></ul><h3 id="memoize" tabindex="-1">memoize <a class="header-anchor" href="#memoize" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>...any[]</code></li></ul></li><li>Returns: <code>any</code></li></ul><hr><h3 id="fuzzyhighscore" tabindex="-1">fuzzyHighScore <a class="header-anchor" href="#fuzzyhighscore" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>query: string</code></li><li><code>sources: string[]</code></li><li><code>minScore?: number</code></li><li><code>partial?: boolean</code></li><li><code>skipCanonicalizing?: boolean</code></li></ul></li><li>Returns: <code>Promise&lt;[idx: number, score: number]&gt;</code></li></ul><h3 id="topfuzzyitemmatches-t" tabindex="-1">topFuzzyItemMatches&lt;T&gt; <a class="header-anchor" href="#topfuzzyitemmatches-t" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>query: string</code></li><li><code>itemWTextColl: {item: T, text: string[]}[]</code></li><li><code>minScore?: number</code></li></ul></li><li>Returns: <code>Promise&lt;T[]&gt;</code></li></ul><p><code>T</code> is <code>any</code>. It is the type of the returned items that have a score greater than minScore.</p><hr><h3 id="highlight" tabindex="-1">highlight <a class="header-anchor" href="#highlight" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>...els: HTMLElement[]</code></li></ul></li><li>Returns: <code>void</code></li></ul><h3 id="unhighlightall" tabindex="-1">unhighlightAll <a class="header-anchor" href="#unhighlightall" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>void</code></li></ul><hr><h3 id="disambiguate" tabindex="-1">disambiguate <a class="header-anchor" href="#disambiguate" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>els: HTMLElement[] | FrameElWOffsets[]</code></li></ul></li><li>Returns: <code>Promise&lt;[number, Promise&lt;void&gt;]&gt;</code></li></ul><hr><h3 id="clickorfocus" tabindex="-1">clickOrFocus <a class="header-anchor" href="#clickorfocus" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>el: HTMLElement</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Intelligently &quot;clicks&quot; an element depending on the element type.</p><h3 id="isinviewandtakesspace" tabindex="-1">isInViewAndTakesSpace <a class="header-anchor" href="#isinviewandtakesspace" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>el: HTMLElement</code></li></ul></li><li>Returns: <code>boolean</code></li></ul><p>Checks if an element is in the viewport and takes up view space (not 0x0 pixels)</p><h3 id="getrgb" tabindex="-1">getRGB <a class="header-anchor" href="#getrgb" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>colorHexOrRgbStr: string</code></li></ul></li><li>Returns: <code>[red: number, green: number, blue: number]</code></li></ul><p>Used for getting color from computed css.</p><h3 id="getnocollisionuniqueattr" tabindex="-1">getNoCollisionUniqueAttr <a class="header-anchor" href="#getnocollisionuniqueattr" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>string</code></li></ul><p>Use the string returned from here to keep everything under the LipSurf namespace and prevent page pollution/plugin collisions.</p><h3 id="getoptions" tabindex="-1">getOptions <a class="header-anchor" href="#getoptions" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li>None</li></ul></li><li>Returns: <code>Options</code></li></ul><p>Get all the user-set options.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Used by the &quot;help&quot; command to get the list of commands and generate the help overlay.</p></div><h3 id="gethudel" tabindex="-1">getHUDEl <a class="header-anchor" href="#gethudel" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>obscureTags: boolean</code></li></ul></li><li>Returns: <code>Promise&lt;[hudEl: HTMLElement, hadToReattach: boolean]&gt;</code></li></ul><p>Get the shadow DOM element used for most LipSurf HUD elements. The HUD will be automatically removed when LipSurf is deactivated so you don&#39;t need to clean it up yourself.</p><h3 id="scrolltoanimated" tabindex="-1">scrollToAnimated <a class="header-anchor" href="#scrolltoanimated" aria-hidden="true">#</a></h3><ul><li>Arguments: <ul><li><code>el: HTMLElement</code></li><li><code>offset?: number</code></li></ul></li><li>Returns: <code>void</code></li></ul><p>Smooth animated scroll to an element.</p>',86),n=[a];function r(s,d,c,u,h,g){return l(),t("div",null,n)}var f=e(o,[["render",r]]);export{m as __pageData,f as default};
